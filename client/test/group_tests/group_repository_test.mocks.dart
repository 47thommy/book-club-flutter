// Mocks generated by Mockito 5.4.0 from annotations
// in client/test/group_tests/group_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:client/infrastructure/group/data_providers/group_api.dart'
    as _i6;
import 'package:client/infrastructure/group/data_providers/group_local.dart'
    as _i4;
import 'package:client/infrastructure/group/dto/group_dto.dart' as _i3;
import 'package:client/utils/either.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<T> extends _i1.SmartFake implements _i2.Either<T> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGroupDto_1 extends _i1.SmartFake implements _i3.GroupDto {
  _FakeGroupDto_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GroupCacheClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupCacheClient extends _i1.Mock implements _i4.GroupCacheClient {
  MockGroupCacheClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i3.GroupDto>> get(int? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i5.Future<_i2.Either<_i3.GroupDto>>.value(
            _FakeEither_0<_i3.GroupDto>(
          this,
          Invocation.method(
            #get,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i3.GroupDto>>);
  @override
  _i5.Future<_i2.Either<List<_i3.GroupDto>>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<List<_i3.GroupDto>>>.value(
            _FakeEither_0<List<_i3.GroupDto>>(
          this,
          Invocation.method(
            #getAll,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<List<_i3.GroupDto>>>);
  @override
  _i5.Future<_i2.Either<List<_i3.GroupDto>>> getJoined() => (super.noSuchMethod(
        Invocation.method(
          #getJoined,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<List<_i3.GroupDto>>>.value(
            _FakeEither_0<List<_i3.GroupDto>>(
          this,
          Invocation.method(
            #getJoined,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<List<_i3.GroupDto>>>);
  @override
  _i5.Future<void> save(
    _i3.GroupDto? group, [
    bool? joined = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [
            group,
            joined,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [GroupApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupApi extends _i1.Mock implements _i6.GroupApi {
  MockGroupApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: '',
      ) as String);
  @override
  _i5.Future<_i3.GroupDto> getGroup(
    int? id,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroup,
          [
            id,
            token,
          ],
        ),
        returnValue: _i5.Future<_i3.GroupDto>.value(_FakeGroupDto_1(
          this,
          Invocation.method(
            #getGroup,
            [
              id,
              token,
            ],
          ),
        )),
      ) as _i5.Future<_i3.GroupDto>);
  @override
  _i5.Future<List<_i3.GroupDto>> getGroups(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroups,
          [token],
        ),
        returnValue: _i5.Future<List<_i3.GroupDto>>.value(<_i3.GroupDto>[]),
      ) as _i5.Future<List<_i3.GroupDto>>);
  @override
  _i5.Future<List<_i3.GroupDto>> getJoinedGroups(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJoinedGroups,
          [token],
        ),
        returnValue: _i5.Future<List<_i3.GroupDto>>.value(<_i3.GroupDto>[]),
      ) as _i5.Future<List<_i3.GroupDto>>);
  @override
  _i5.Future<_i3.GroupDto> createGroup({
    required _i3.GroupDto? group,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGroup,
          [],
          {
            #group: group,
            #token: token,
          },
        ),
        returnValue: _i5.Future<_i3.GroupDto>.value(_FakeGroupDto_1(
          this,
          Invocation.method(
            #createGroup,
            [],
            {
              #group: group,
              #token: token,
            },
          ),
        )),
      ) as _i5.Future<_i3.GroupDto>);
  @override
  _i5.Future<_i3.GroupDto> updateGroup({
    required _i3.GroupDto? group,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [],
          {
            #group: group,
            #token: token,
          },
        ),
        returnValue: _i5.Future<_i3.GroupDto>.value(_FakeGroupDto_1(
          this,
          Invocation.method(
            #updateGroup,
            [],
            {
              #group: group,
              #token: token,
            },
          ),
        )),
      ) as _i5.Future<_i3.GroupDto>);
  @override
  _i5.Future<void> deleteGroup({
    required _i3.GroupDto? group,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteGroup,
          [],
          {
            #group: group,
            #token: token,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> join({
    required _i3.GroupDto? group,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #join,
          [],
          {
            #group: group,
            #token: token,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> leave({
    required _i3.GroupDto? group,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #leave,
          [],
          {
            #group: group,
            #token: token,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> addMember(
    _i3.GroupDto? group,
    int? userId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMember,
          [
            group,
            userId,
            token,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> removeMember(
    _i3.GroupDto? group,
    int? userId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMember,
          [
            group,
            userId,
            token,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
